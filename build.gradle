allprojects {
	apply plugin: 'eclipse'
}

project(':server'){
	apply plugin: 'war'
	apply plugin: 'java'
	apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

	apply plugin: 'java'
	
	apply plugin: 'jacoco'
	jacocoTestReport {
	    reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/jacocoHtml"
	    }
	}
	test {
	    jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpFile = file("$buildDir/jacoco/classpathdumps")
	    }
	}

	jacocoTestReport {
	    afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
		    fileTree(dir: it, exclude: 'META-INF/**')
		})
	    }
	}




	dependencies {
		compile project(':dtos')
		testCompile group: 'org.assertj', name: 'assertj-core', version: '3.+'
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}
}

project(':dtos'){
	apply plugin: 'java'
}

project(':android'){
	apply plugin: 'java'
}
task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects 
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
      xml.enabled true
      html.enabled true
      html.destination "${buildDir}/reports/jacoco"
      csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
